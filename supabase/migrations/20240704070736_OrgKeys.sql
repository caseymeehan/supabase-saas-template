


CREATE OR REPLACE FUNCTION "public"."generate_random_apikey"() RETURNS "text"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
  characters TEXT := 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  result TEXT := '';
  i INT := 0;
BEGIN
  FOR i IN 1..64 LOOP
    result := result || substr(characters, floor(random()*62)::int + 1, 1);
  END LOOP;
  RETURN result;
END;
$$;



ALTER FUNCTION "public"."generate_random_apikey"() OWNER TO "postgres";


GRANT ALL ON FUNCTION "public"."generate_random_apikey"() TO "anon";
GRANT ALL ON FUNCTION "public"."generate_random_apikey"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."generate_random_apikey"() TO "service_role";

CREATE TABLE IF NOT EXISTS "public"."organisation_apikey" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "org_id" bigint,
    "key" "text" DEFAULT "public"."generate_random_apikey"() NOT NULL
);


ALTER TABLE "public"."organisation_apikey" OWNER TO "postgres";


ALTER TABLE ONLY "public"."organisation_apikey"
    ADD CONSTRAINT "organisation_apikey_key" UNIQUE ("key");

ALTER TABLE "public"."organisation_apikey" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."organisation_apikey_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."organisation_apikey"
    ADD CONSTRAINT "organisation_apikey_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."organisation_apikey"
    ADD CONSTRAINT "public_organisation_apikey_org_id_fkey" FOREIGN KEY ("org_id") REFERENCES "public"."organisation"("id") ON UPDATE CASCADE ON DELETE CASCADE;


CREATE POLICY "can get api keys of organisation when is member" ON "public"."organisation_apikey" FOR SELECT USING ("public"."is_member_of"("auth"."uid"(), "org_id"));

CREATE POLICY "can update api keys of organisation when is admin" ON "public"."organisation_apikey" FOR UPDATE USING ("public"."is_admin_of"("auth"."uid"(), "org_id"));

CREATE POLICY "can delete api keys of organisation when is admin" ON "public"."organisation_apikey" FOR DELETE USING ("public"."is_admin_of"("auth"."uid"(), "org_id"));

CREATE POLICY "Factory users can edit everything" ON "public"."organisation_apikey" USING (("auth"."uid"() IN ( SELECT "factory_user"."user_id"
   FROM "public"."factory_user"
  WHERE ("auth"."uid"() = "factory_user"."user_id"))));


ALTER TABLE "public"."organisation_apikey" ENABLE ROW LEVEL SECURITY;


GRANT ALL ON TABLE "public"."organisation_apikey" TO "anon";
GRANT ALL ON TABLE "public"."organisation_apikey" TO "authenticated";
GRANT ALL ON TABLE "public"."organisation_apikey" TO "service_role";

GRANT ALL ON SEQUENCE "public"."organisation_apikey_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."organisation_apikey_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."organisation_apikey_id_seq" TO "service_role";